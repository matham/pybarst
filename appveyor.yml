version: 1.0.{build}
environment:
  BARST_BUILD_DIR: C:\barst_build
  BARST_RELEASE: https://github.com/matham/barst/releases/download/v2.1/
  DEPLOY_DIR: deploy
  access_token:
    secure: H8F1UMqC4QixM9NbnHewuineXTu860e3WhkpgMzui6xQmCv2qyXd4BDonVrrW5Iv
  matrix:
  - PYVER: 27
    BITTNESS: 32
  - PYVER: 34
    BITTNESS: 32
  - PYVER: 27
    BITTNESS: 64
  - PYVER: 34
    BITTNESS: 64
build_script:
- ps: >-
    function Check-Error

    {
      param([int]$SuccessVal = 0)
      if ($SuccessVal -ne $LastExitCode) {
        throw "Failed with exit code $LastExitCode"
      }
    }

    $old_path = "$env:PYTHONPATH"

    $env:PYTHONPATH = "$env:APPVEYOR_BUILD_FOLDER;$env:PYTHONPATH"

    $env:BARST_INCLUDE = "$env:BARST_BUILD_DIR\include"

    $env:PYBARST_BINARIES = "$env:BARST_BUILD_DIR\bin"

    if ($env:BITTNESS -eq "64") {
      $PYTHON_ROOT = "C:\Python$env:PYVER-x64"
    } else {
      $PYTHON_ROOT = "C:\Python$env:PYVER"
    }

    $env:PATH = "$PYTHON_ROOT;$PYTHON_ROOT\Scripts;$env:PATH;C:\Program Files\7-Zip"


    python -c "import sys;print('Python version is {}'.format(sys.version))"

    Check-Error


    mkdir "$env:BARST_BUILD_DIR"

    Check-Error

    mkdir "$env:BARST_INCLUDE"

    Check-Error

    mkdir "$env:PYBARST_BINARIES"

    Check-Error

    mkdir "$env:DEPLOY_DIR"

    Check-Error

    python -c "with open(r'$PYTHON_ROOT\Lib\distutils\distutils.cfg', 'wb') as fh: fh.write(b'[build]\ncompiler = mingw32\n')"

    Check-Error

    python -m pip install pip wheel setuptools --upgrade

    Check-Error

    pip install -i https://pypi.anaconda.org/carlkl/simple mingwpy

    Check-Error

    pip install cython nose

    Check-Error



    cd "$env:BARST_INCLUDE"

    Invoke-WebRequest "$BARST_RELEASE`cpl.defs.h" -OutFile "cpl defs.h"

    Check-Error

    cd "$env:PYBARST_BINARIES"

    if ($env:BITTNESS -eq "64") {
        Invoke-WebRequest "$BARST_RELEASE`barst64.exe" -OutFile "barst64.exe"
        Check-Error
        Invoke-WebRequest "$BARST_RELEASE`cbw64.dll" -OutFile "cbw64.dll"
        Check-Error
    } else {
        Invoke-WebRequest "$BARST_RELEASE`barst.exe" -OutFile "barst.exe"
        Check-Error
        Invoke-WebRequest "$BARST_RELEASE`cbw32.dll" -OutFile "cbw32.dll"
        Check-Error
    }



    cd "$env:APPVEYOR_BUILD_FOLDER"

    python setup.py bdist_wheel -d "$env:DEPLOY_DIR"

    Check-Error

    if ($env:BITTNESS -eq "64" -and $env:PYVER -eq "34") {
      python setup.py sdist -d "$env:DEPLOY_DIR"
      Check-Error
    }

    $env:PYTHONPATH = "$old_path"

test_script:
- ps: >-
    function Check-Error

    {
      param([int]$SuccessVal = 0)
      if ($SuccessVal -ne $LastExitCode) {
        throw "Failed with exit code $LastExitCode"
      }
    }


    cd "$env:APPVEYOR_BUILD_FOLDER\$env:DEPLOY_DIR"

    $name = python -c "import glob;print(glob.glob('*.whl')[0])"

    Check-Error

    echo $name

    python -m wheel install "$name"

    Check-Error

    python -c "from pybarst.core.server import BarstServer; server = BarstServer(pipe_name=r'\\.\pipe\TestPipe'); server.open_server(); server.clock(); server.close_server()"

    Check-Error


artifacts:
- path: $(DEPLOY_DIR)\*
  name: wheels
on_success:
- ps: >-
    function Check-Error

    {
      param([int]$SuccessVal = 0)
      if ($SuccessVal -ne $LastExitCode) {
        throw "Failed with exit code $LastExitCode"
      }
    }



    if ($env:BITTNESS -eq "64" -and $env:PYVER -eq "27" -and $env:APPVEYOR_REPO_BRANCH -eq "master" -and -not $env:APPVEYOR_PULL_REQUEST_NUMBER) {
      cd "$env:APPVEYOR_BUILD_FOLDER"
      python -m pip install sphinx
      Check-Error
      cd doc
      ./make.bat html
      Check-Error
      cd ..
      mkdir "C:\docs_temp"
      Copy-Item "doc\build\html\*" "C:\docs_temp" -recurse
      Check-Error

      git config --global credential.helper store
      Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:access_token):x-oauth-basic@github.com`n"
      git config --global user.email "moiein2000@gmail.com"
      git config --global user.name "Matthew Einhorn"
      Check-Error

      git checkout --orphan gh-pages
      Check-Error
      git rm -rf .
      Remove-Item -recurse * -exclude .git
      Copy-Item "C:\docs_temp\*" .  -recurse
      echo "" > .nojekyll

      git add .
      Check-Error
      git commit -a -m "Docs for git-$env:APPVEYOR_REPO_COMMIT"
      Check-Error
      git push origin gh-pages -f
      Check-Error
    }
